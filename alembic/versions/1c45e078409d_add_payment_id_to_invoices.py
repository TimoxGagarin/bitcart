"""Add payment_id to invoices

Revision ID: 1c45e078409d
Revises: 91e2cdaa49b5
Create Date: 2024-04-01 00:20:44.780863

"""

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision = "1c45e078409d"
down_revision = "91e2cdaa49b5"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column("paymentmethods", "label", existing_type=sa.TEXT(), nullable=False)
    op.alter_column("wallets", "label", existing_type=sa.TEXT(), nullable=False)
    op.add_column("invoices", sa.Column("payment_id", sa.Text(), nullable=True))
    op.create_foreign_key(
        op.f("invoices_payment_id_paymentmethods_fkey"),
        "invoices",
        "paymentmethods",
        ["payment_id"],
        ["id"],
        ondelete="SET NULL",
    )

    op.execute(
        """
            CREATE OR REPLACE FUNCTION get_methods_inds(inv_id TEXT)
            RETURNS TABLE (index int, payment_method_id text) AS
            $$
            DECLARE
                currencies INT;
                met INT;
                item RECORD;
                inner_item RECORD;
            BEGIN
                FOR item IN
                    SELECT DISTINCT symbol
                    FROM paymentmethods AS pm
                    WHERE pm.invoice_id = inv_id
                LOOP
                    currencies := 0;
                    met := 0;
                    SELECT COUNT(*)
                    INTO currencies
                    FROM paymentmethods AS pm
                    WHERE pm.invoice_id = inv_id
                    AND symbol = item.symbol
                    AND label = ''
                    AND lightning = FALSE;

                    FOR inner_item IN
                        SELECT id, label, lightning
                        FROM paymentmethods  AS pm
                        WHERE pm.invoice_id = inv_id
                        AND symbol = item.symbol
                    LOOP
                        IF inner_item.label = '' AND inner_item.lightning = FALSE THEN
                            met := met + 1;
                        END IF;

                        IF currencies > 1 THEN
                            index := met;
                        ELSE
                            index := NULL;
                        END IF;

                        payment_method_id := inner_item.id;
                        RETURN NEXT;
                    END LOOP;
                END LOOP;
            END;
            $$ LANGUAGE plpgsql;

            CREATE OR REPLACE FUNCTION get_name(p_id TEXT, p_index INTEGER)
            RETURNS TEXT AS
            $$
            DECLARE
                v_label TEXT;
                v_symbol TEXT;
                v_lightning BOOLEAN;
                name TEXT;
            BEGIN
                SELECT label, symbol, lightning INTO v_label, v_symbol, v_lightning
                FROM paymentmethods
                WHERE id = p_id;

                IF LENGTH(v_label) != 0 THEN
                    name := v_label;
                ELSE
                    name := v_symbol;
                    IF v_lightning THEN
                        name := name || ' (âš¡)';
                    END IF;
                    IF p_index IS NOT NULL THEN
                        name := name || ' (' || p_index || ')';
                    END IF;
                    name := UPPER(name);
                END IF;
                RETURN name;
            END;
            $$
            LANGUAGE plpgsql;

            UPDATE invoices AS i
            SET payment_id = subquery.payment_id
            FROM (
                SELECT inv.id, inv.paid_currency, gni.payment_id, get_name(gni.payment_id, gni.index)
                FROM invoices AS inv
                JOIN paymentmethods AS pm ON pm.invoice_id = inv.id
                JOIN LATERAL get_methods_inds(inv.id) AS gni(index, payment_id)
                ON starts_with(get_name(gni.payment_id, gni.index), inv.paid_currency) AND inv.paid_currency != ''
            ) AS subquery(id, paid_currency, payment_id, name)
            WHERE subquery.id = i.id;
        """
    )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column("wallets", "label", existing_type=sa.TEXT(), nullable=True)
    op.alter_column("paymentmethods", "label", existing_type=sa.TEXT(), nullable=True)
    op.drop_constraint(op.f("invoices_payment_id_paymentmethods_fkey"), "invoices", type_="foreignkey")
    op.drop_column("invoices", "payment_id")
    # ### end Alembic commands ###
